@page "/models/{id}"
@rendermode InteractiveServer
@using OpenFlowWebServer.Repository
@using OpenFlowWebServer.Domain.Entities
@inject IModelRepository ModelRepository

<h3>Szczegóły modelu</h3>

@if (model == null)
{
    <p>Ładowanie...</p>
}
else
{
    <div class="card mb-3">
        <div class="card-body">
            <h4 class="card-title">@model.ModelName</h4>
            <p class="card-text"><strong>Opis:</strong> @model.ModelDescription</p>
            <p class="card-text"><strong>Typ:</strong> @model.ModelType</p>
            <p class="card-text"><strong>Id projektu:</strong> @model.ProjectId</p>
        </div>
    </div>

    <div class="mb-2">
        <label for="methodSelect" class="form-label">Wybierz metodę przeszukiania:</label>
        <select id="methodSelect" class="form-select" @onchange="OnMethodChanged" value="@selectedMethod">
            @if (methodOptions != null)
            {
                @foreach (var option in methodOptions)
                {
                    <option value="@option.Value">@option.Label</option>
                }
            }
            else
            {
                <option disabled>Ładowanie...</option>
            }
        </select>
        @if (model.SearchMethod == "RS")
        {
            <div class="mt-2">
                <label for="stepsInput" class="form-label">Liczba kroków:</label>
                <input id="stepsInput" type="number" class="form-control" @bind="Steps" min="1" />
            </div>
        }
    </div>

    @if (model.Hyperparameters != null && model.Hyperparameters.Any())
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Nazwa</th>
                    <th>Typ</th>
                    <th>Opis</th>
                    <th>Zakres dolny</th>
                    <th>Zakres górny</th>
                    <th>Krok</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var hp in model.Hyperparameters)
                {
                    <tr>
                        <td>@hp.Name</td>
                        <td>@hp.Type</td>
                        <td>@hp.Description</td>
                        <td>@hp.bottomRange</td>
                        <td>@hp.upperRange</td>
                        <td>@hp.step</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>Brak zdefiniowanych hiperparametrów.</p>
    }
}

@code {
    [Parameter]
    public string Id { get; set; }
    private Model model;
    private List<MethodOption> methodOptions;
    string selectedMethod;

    private int Steps
    {
        get => model.Steps??1;
        set
        {
            model.Steps = value;
            UpdateModel();
        }
    }



    protected override async Task OnInitializedAsync()
    {
        if (Guid.TryParse(Id, out var guid))
        {
            model = await ModelRepository.GetByIdAsync(guid);
        }
        LoadMethodOptionsAsync();
        StateHasChanged();
        base.OnInitializedAsync();
    }

    private void LoadMethodOptionsAsync()
    {
        methodOptions = new List<MethodOption>
        {
            new MethodOption { Value = "GS", Label = "Grid Search" },
            new MethodOption { Value = "RS", Label = "Random Search" },
        };
    }

    private class MethodOption
    {
        public string Value { get; set; }
        public string Label { get; set; }
    }

    private Task OnMethodChanged(ChangeEventArgs e)
    {
        selectedMethod = e.Value.ToString();
        model.SearchMethod = selectedMethod;
        return UpdateModel();
    }

    private async Task UpdateModel()
    {
        await ModelRepository.UpdateAsync(model);
        await ModelRepository.SaveChangesAsync();
        StateHasChanged();
    }
}